"""
FiftyOne Server app.

| Copyright 2017-2024, Voxel51, Inc.
| `voxel51.com <https://voxel51.com/>`_
|
"""
import os
import pathlib
import stat

import eta.core.utils as etau
from starlette.applications import Starlette
from starlette.datastructures import Headers
from starlette.middleware import Middleware
from starlette.middleware.base import (
    BaseHTTPMiddleware,
    RequestResponseEndpoint,
)
from starlette.middleware.cors import CORSMiddleware
from starlette.requests import Request
from starlette.responses import FileResponse, RedirectResponse, Response
from starlette.routing import Mount, Route
from starlette.staticfiles import NotModifiedResponse, PathLike, StaticFiles
from starlette.types import Scope
import strawberry as gql

import fiftyone as fo
import fiftyone.constants as foc
from fiftyone.server.constants import SCALAR_OVERRIDES
from fiftyone.server.context import GraphQL
from fiftyone.server.extensions import EndSession
from fiftyone.server.mutation import Mutation
from fiftyone.server.query import Query
from fiftyone.server.routes import routes

import logging
# Setup logger for app.py
app_logger = logging.getLogger("fiftyone.server.app")
app_logger.setLevel(logging.DEBUG)

# Create a handler to save logs to a file
file_handler = logging.FileHandler('fiftyone_app.txt')
file_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# Create a handler to display the logs on the console
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)

# Add the handlers to the logger
app_logger.addHandler(file_handler)
app_logger.addHandler(console_handler)

# Example log usage
app_logger.info("Initializing FiftyOne app...")
etau.ensure_dir(os.path.join(os.path.dirname(__file__), "static"))



class Static(StaticFiles):
    def file_response(
        self,
        full_path: PathLike,
        stat_result: os.stat_result,
        scope: Scope,
        status_code: int = 200,
    ) -> Response:
        method = scope["method"]
        request_headers = Headers(scope=scope)

        app_logger.info(f"Serving file: {full_path} with status {status_code} using method {method}")

        response = FileResponse(
            full_path,
            status_code=status_code,
            stat_result=stat_result,
            method=method,
        )
        if response.path.endswith("index.html"):
            response.headers["cache-control"] = "no-store"
            app_logger.debug(f"Cache-control set to 'no-store' for: {full_path}")
        elif self.is_not_modified(response.headers, request_headers):
            app_logger.debug(f"File not modified: {full_path}")
            return NotModifiedResponse(response.headers)

        return response

    async def get_response(self, path: str, scope: Scope) -> Response:
        app_logger.debug(f"Attempting to serve file for path: {path}")
        response = await super().get_response(path, scope)
        app_logger.debug(f"Response {response}")
        if response.status_code == 404:
            parts = pathlib.Path(path).parts
            path = pathlib.Path(*parts[1:])
            if parts and parts[0] == "datasets":
                app_logger.debug(f"File not found, looking in datasets path: {path}")
                full_path, stat_result = self.lookup_path(path)
                if stat_result and stat.S_ISREG(stat_result.st_mode):
                    app_logger.debug(f"Serving dataset file: {full_path}")
                    return self.file_response(full_path, stat_result, scope)

                if len(parts) == 2:
                    full_path, stat_result = self.lookup_path("index.html")
                    app_logger.debug(f"Serving index.html for dataset: {full_path}")
                    return self.file_response(full_path, stat_result, scope)
                app_logger.debug(f"File not found, redirecting to home: {path}")
            return RedirectResponse(url="/")
        
        app_logger.debug(f"File served successfully for path: {path}")
        logging.debug(f"Response {response}")
        return response


class HeadersMiddleware(BaseHTTPMiddleware):
    async def dispatch(
        self, request: Request, call_next: RequestResponseEndpoint
    ) -> Response:
        response = await call_next(request)
        response.headers["x-colab-notebook-cache-control"] = "no-cache"
        return response


schema = gql.Schema(
    mutation=Mutation,
    query=Query,
    extensions=[EndSession],
    scalar_overrides=SCALAR_OVERRIDES,
)


app = Starlette(
    middleware=[
        Middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_methods=["GET", "POST", "HEAD", "OPTIONS"],
            allow_headers=[
                "access-control-allow-origin",
                "authorization",
                "content-type",
            ],
        ),
        Middleware(HeadersMiddleware),
    ],
    debug=True,
    routes=[Route(route, endpoint) for route, endpoint in routes]
    + [
        Route(
            "/graphql",
            GraphQL(
                schema,
                graphiql=foc.DEV_INSTALL,
            ),
        ),
        Mount(
            "/plugins",
            app=Static(
                directory=fo.config.plugins_dir,
                html=True,
                check_dir=False,
                follow_symlink=True,
            ),
            name="plugins",
        ),
        Mount(
            "/",
            app=Static(
                directory=os.path.join(os.path.dirname(__file__), "static"),
                html=True
            ),
            name="static",
        ),
    ],
)
